mantis {
  consensus {
    # Miner's coinbase address
    # Also used in non-Ethash consensus.
    # coinbase = "0011223344556677889900112233445566778899"

    # This determines how many parallel eth_getWork request we can handle, by storing the prepared blocks in a cache,
    # until a corresponding eth_submitWork request is received.
    #
    # Also used by the generic `BlockGenerator`.
    # block-cashe-size = 30

    # If true then the consensus protocol uses this node for mining.
    # In the case of ethash PoW, this means mining new blocks, as specified by Ethereum.
    # In the general case, the semantics are due to the specific consensus implementation.
    # mining-enabled = false

    # See io.iohk.ethereum.consensus.Protocol for the available protocols.
    # Declaring the protocol here means that a more protocol-specific configuration
    # is pulled from the corresponding consensus implementation.
    # For example, in case of ethash, a section named `ethash` is used.
    # protocol = ethash
  }

  # This is the section dedicated to Ethash mining.
  # This consensus protocol is selected by setting `mantis.consensus.protocol = ethash`.
  ethash {
    # Maximum number of ommers kept in the pool
    # ommers-pool-size = 30
  }

  # This is the section dedicated to `atomix-raft` consensus.
  # This consensus protocol is selected by setting `mantis.consensus.protocol = atomix-raft`.
  atomix-raft {
    # Determines how often new blocks will be forged
    # block-forging-delay = 15.seconds

    # Represents this node.
    #
    # ID and PORT are not mandatory.
    # If PORT is not given, then is assumes the value of
    # io.atomix.messaging.impl.NettyMessagingService.DEFAULT_PORT, which currently is 5679.
    # If ID is not given, then its value becomes IP_PORT.
    local-node = "ID:IP:PORT"

    # All the other nodes in the cluster, in the same format as with `local-node`.
    bootstrap-nodes = [
      "ID1:IP:PORT",
      "ID2:IP:PORT",
      "ID3:IP:PORT"
    ]
  }
}
